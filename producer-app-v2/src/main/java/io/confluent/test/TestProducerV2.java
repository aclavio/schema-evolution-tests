/*
 * This source file was generated by the Gradle 'init' task
 */
package io.confluent.test;

import com.github.javafaker.Faker;
import org.apache.avro.specific.SpecificRecordBase;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import stream.processing.demo.AccountCreated;
import stream.processing.demo.AccountDeleted;
import stream.processing.demo.AccountUpdated;

import java.io.Closeable;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Properties;
import java.util.Random;
import java.util.UUID;

public class TestProducerV2 implements Closeable {
    private static final Logger logger = LoggerFactory.getLogger(TestProducerV2.class);

    private static final String DEFAULT_CONFIG_FILE = "producer.properties";
    private static final String DEFAULT_TOPIC = "union.test.avro";
    private static final Integer DEFAULT_ITERATIONS = 20;

    private final KafkaProducer<String, SpecificRecordBase> producer;
    private final Faker faker;
    private final Random random;

    public TestProducerV2(Properties config) {
        producer = new KafkaProducer<>(config);
        faker = new Faker();
        random = new Random();
    }

    public void publishRandomUnionType(String topic) {
        String id = UUID.randomUUID().toString();
        SpecificRecordBase accountUpdate = null;
        int chance = random.nextInt(0, 100);

        if (80 > chance) {
            // heavily weighted as we'll be evolving this type
            accountUpdate = AccountCreated.newBuilder()
                    .setId(id)
                    .setOwner(faker.name().fullName())
                    .setComment(faker.hitchhikersGuideToTheGalaxy().marvinQuote())
                    .build();
        } else if (90 > chance) {
            accountUpdate = AccountDeleted.newBuilder()
                    .setId(id)
                    .build();
        } else {
            accountUpdate = AccountUpdated.newBuilder()
                    .setId(id)
                    .setAmount(faker.number().numberBetween(-100, 100))
                    .build();
        }

        logger.info("publishing record: {}", accountUpdate);
        ProducerRecord<String, SpecificRecordBase> record = new ProducerRecord<>(
                topic,
                LocalDateTime.now().toString(),
                accountUpdate
        );
        producer.send(record, (recordMetadata, err) -> {
            if (err == null) {
                logger.info("Published succeeded: {}", recordMetadata);
            } else {
                logger.error("Error producing record", err);
            }
        });
    }

    @Override
    public void close() throws IOException {
        producer.close();
    }

    public static void main(String[] args) throws IOException {
        // load passed in properties
        String configPath = args.length > 0 ? args[0] : DEFAULT_CONFIG_FILE;
        final Properties cfg = new Properties();
        cfg.load(new FileInputStream(configPath));
        // get the topic to produce to
        String kafkaTopic = args.length > 1 ? args[1] : DEFAULT_TOPIC;
        Integer iterations = args.length > 2 ? Integer.parseInt(args[2]): DEFAULT_ITERATIONS;

        try(TestProducerV2 testProducer = new TestProducerV2(cfg)) {
            for (int i = 0; i < iterations; i++) {
                testProducer.publishRandomUnionType(kafkaTopic);
            }
        }
    }
}
